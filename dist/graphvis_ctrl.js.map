{"version":3,"sources":["../src/graphvis_ctrl.js"],"names":["MetricsPanelCtrl","_","Viz","require","Module","render","panelDefaults","bgColor","GraphvisCtrl","$scope","$injector","defaultsDeep","panel","events","on","onInitEditMode","bind","onPanelTeardown","onDataReceived","onDataError","onDataSnapshotLoad","viz","addEditorTab","dataList","renderSVGElement","then","element","document","getElementById","replaceChild","snapshotData","scope","elem","$panelContainer","find","css","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,sB,kBAAAA,gB;;AACDC,O;;;;;;;;;;;;;;;;;;;;;AAEDC,S,GAAMC,QAAQ,QAAR,C;iBACeA,QAAQ,uBAAR,C;AAAnBC,Y,YAAAA,M;AAAQC,Y,YAAAA,M;AAGVC,mB,GAAgB;AACpBC,iBAAS;AADW,O;;8BAITC,Y;;;AACX,8BAAYC,MAAZ,EAAoBC,SAApB,EAA+B;AAAA;;AAAA,kIACvBD,MADuB,EACfC,SADe;;AAG7B;AACAT,YAAEU,YAAF,CAAe,MAAKC,KAApB,EAA2BN,aAA3B;;AAEA;AACA;AACA,gBAAKO,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKC,cAAL,CAAoBC,IAApB,OAAjC;;AAEA;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKG,eAAL,CAAqBD,IAArB,OAAjC;;AAEA;AACA;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,mBAAf,EAAoC,MAAKT,MAAL,CAAYW,IAAZ,OAApC;;AAEA;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,eAAf,EAAgC,MAAKI,cAAL,CAAoBF,IAApB,OAAhC;;AAEA;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,YAAf,EAA6B,MAAKK,WAAL,CAAiBH,IAAjB,OAA7B;;AAEA;AACA;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,oBAAf,EAAqC,MAAKM,kBAAL,CAAwBJ,IAAxB,OAArC;;AAEA,gBAAKK,GAAL,GAAW,IAAInB,GAAJ,CAAQ,EAAEE,cAAF,EAAUC,cAAV,EAAR,CAAX;AA3B6B;AA4B9B;;;;2CAEgB;AACf,iBAAKiB,YAAL,CAAkB,SAAlB,EAA6B,2CAA7B,EAA0E,CAA1E;AACD;;;4CAEiB,CACjB;;;yCAEcC,Q,EAAU;AACvB,iBAAKF,GAAL,CAASG,gBAAT,CAA0B,oBAA1B,EACCC,IADD,CACM,UAASC,OAAT,EAAkB;AACtBC,uBACCC,cADD,CACgB,gBADhB,EAECC,YAFD,CAEcH,OAFd,EAEuBC,SAASC,cAAT,CAAwB,KAAxB,CAFvB;AAGD,aALD;;AAOA,gBAAI,CAACL,QAAL,EAAe;AAChB;;;wCAEa;AACZ,iBAAKL,cAAL,CAAoB,EAApB;AACD;;;6CAEkBY,Y,EAAc;AAC/B,iBAAKZ,cAAL,CAAoBY,YAApB;AACD;;;+BAMIC,K,EAAOC,I,EAAM;AAAA;;AAChB,iBAAKnB,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB,YAAM;AAC7B,kBAAMmB,kBAAkBD,KAAKE,IAAL,CAAU,kBAAV,CAAxB;;AAEA,kBAAI,OAAKtB,KAAL,CAAWL,OAAf,EAAwB;AACtB0B,gCAAgBE,GAAhB,CAAoB,kBAApB,EAAwC,OAAKvB,KAAL,CAAWL,OAAnD;AACD,eAFD,MAEO;AACL0B,gCAAgBE,GAAhB,CAAoB,kBAApB,EAAwC,EAAxC;AACD;AACF,aARD;AASD;;;;QAvE+BnC,gB;;;;AA0ElCQ,mBAAa4B,WAAb,GAA2B,aAA3B","file":"graphvis_ctrl.js","sourcesContent":["import {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport './css/graphvis-panel.css!';\nconst Viz = require('viz.js');\nconst { Module, render } = require('viz.js/full.render.js');\n\n\nconst panelDefaults = {\n  bgColor: null,\n};\n\nexport class GraphvisCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector) {\n    super($scope, $injector);\n\n    // Set panel defaults for properties that the user has not set explicitly\n    _.defaultsDeep(this.panel, panelDefaults);\n\n    // init-edit-mode event is triggered when the user clicks on edit\n    // the editor tabs are initialized in the handler\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n\n    // The panel-teardown event is useful for cleaning up to avoid memory leaks\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n\n    // The panel initialized event can be useful for panels that inherit PanelCtrl instead of MetricsPanelCtrl\n    // With a MetricsPanelCtrl panel, you usually want to wait for some data to be received\n    this.events.on('panel-initialized', this.render.bind(this));\n\n    // The data-received event is triggered when the datasource returns with data\n    this.events.on('data-received', this.onDataReceived.bind(this));\n\n    // The data-error event can be handled by showing a friendly error message to the user or to ignore the error\n    this.events.on('data-error', this.onDataError.bind(this));\n\n    // The data-snapshot-load event is triggered when the dashboard is loading as a snapshot\n    // Read more about saving and loading snapshot data here:\n    this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n\n    this.viz = new Viz({ Module, render });\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Options', 'public/plugins/graphvis-panel/editor.html', 2);\n  }\n\n  onPanelTeardown() {\n  }\n\n  onDataReceived(dataList) {\n    this.viz.renderSVGElement('digraph { a -> b }')\n    .then(function(element) {\n      document\n      .getElementById('graphvis-panel')\n      .replaceChild(element, document.getElementById('svg'));\n    });\n\n    if (!dataList) return;\n  }\n\n  onDataError() {\n    this.onDataReceived([]);\n  }\n\n  onDataSnapshotLoad(snapshotData) {\n    this.onDataReceived(snapshotData);\n  }\n\n  /*\n  The link function is an Angular function that can be used to access the HTML element for the panel\n  */\n  /* eslint class-methods-use-this: 0 */\n  link(scope, elem) {\n    this.events.on('render', () => {\n      const $panelContainer = elem.find('.panel-container');\n\n      if (this.panel.bgColor) {\n        $panelContainer.css('background-color', this.panel.bgColor);\n      } else {\n        $panelContainer.css('background-color', '');\n      }\n    });\n  }\n}\n\nGraphvisCtrl.templateUrl = 'module.html';\n"]}